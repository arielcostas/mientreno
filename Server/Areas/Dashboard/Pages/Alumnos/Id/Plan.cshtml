@page "/Dashboard/Alumnos/{id}/Plan"
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model PlanEditorModel
@{
	ViewData["Title"] = AppStrings.Noun_Rutina_Plural;
}

<main id="main-dialogue">
	<h1>@AppStrings.Noun_Rutina_Plural</h1>
	
	@if (Model.ModelState.ErrorCount > 0)
	{
		<div class="alert alert-bad">
			<strong class="alert-title">@AppStrings.Alert_ValidationErrors_Title</strong>
			@Model.ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage).FirstOrDefault()
		</div>
	}

	@{ var disabled = !Model.Editable; }
	<form method="POST">

		<div class="form-group">
			<label asp-for="Form.Nombre">@AppStrings.Input_Name</label>
			<input asp-for="Form.Nombre" class="form-control form-control-filled" disabled="@disabled"/>
		</div>

		<div class="form-group">
			<label asp-for="Form.Descripcion">@AppStrings.Input_Descripcion</label>
			<textarea asp-for="Form.Descripcion" class="form-control form-control-filled" rows="5" disabled="@disabled"></textarea>
		</div>

		<hr/>

		<div class="title-with-action">
			<h2>
				@AppStrings.ejercicios
			</h2>

			<button class="button button-primary" type="button" onclick="addEjercicio()" disabled="@disabled">+ @AppStrings.Action_Add</button>
		</div>

		<div id="ejercicio-container">
			@{
				var groupedByCategory = Model.Ejercicios.GroupBy(e => e.Categoria);
			}

			@for (var i = 0; i < Model.Form.EjerciciosPlan.Length; i++)
			{
				<article class="ejercicio">
					<select asp-for="Form.EjerciciosPlan[i].Ejercicio" class="form-control form-control-filled" title="Ejercicio" disabled="@disabled">
						@foreach (var group in groupedByCategory)
						{
							<optgroup label="@group.Key!.Nombre">
								@foreach (var ejercicio in group)
								{
									@if (Model.Form.EjerciciosPlan[i].Ejercicio == ejercicio.Id)
									{
										<option value="@ejercicio.Id" selected>
											@ejercicio.Nombre
										</option>
									}
									else
									{
										<option value="@ejercicio.Id">
											@ejercicio.Nombre
										</option>
									}
								}
							</optgroup>
						}
					</select>
					<input asp-for="Form.EjerciciosPlan[i].Series" class="form-control form-control-filled" placeholder="Series" type="number" min="0" disabled="@disabled"/>
					<input asp-for="Form.EjerciciosPlan[i].Repeticiones" class="form-control form-control-filled" placeholder="Reps." type="number" min="0" disabled="@disabled"/>
					<input asp-for="Form.EjerciciosPlan[i].Minutos" class="form-control form-control-filled" placeholder="Min." type="number" min="0" disabled="@disabled"/>
				</article>
			}

			@if (Model.Form.EjerciciosPlan.Length == 0)
			{
				<article class="ejercicio">
					<select name="Form.EjerciciosPlan[0].Ejercicio" class="form-control form-control-filled" title="Ejercicio" disabled="@disabled">
						@foreach (var group in groupedByCategory)
						{
							<optgroup label="@group.Key!.Nombre">
								@foreach (var ejercicio in group)
								{
									<option value="@ejercicio.Id">@ejercicio.Nombre</option>
								}
							</optgroup>
						}
					</select>
					<input name="Form.EjerciciosPlan[0].Series" class="form-control form-control-filled" placeholder="Series" type="number" min="0" disabled="@disabled"/>
					<input name="Form.EjerciciosPlan[0].Repeticiones" class="form-control form-control-filled" placeholder="Reps." type="number" min="0" disabled="@disabled"/>
					<input name="Form.EjerciciosPlan[0].Minutos" class="form-control form-control-filled" placeholder="Min." type="number" min="0" disabled="@disabled"/>
				</article>
			}
		</div>

		<hr/>

		@if (Model.Editable)
		{
			<div class="form-check">
				<input asp-for="Form.Publicar" type="checkbox" class="form-check-input" disabled="@disabled"/>
				<label asp-for="Form.Publicar" disabled="@disabled">
					@AppStrings.Input_PublishPlanUnableEditLater
				</label>
			</div>
		}

		@if (Model.Feedback is not null)
		{
			<h3>@AppStrings.Text_Dashboard_AlumnoFeedback</h3>

			<p>
				@for (var i = 1; i <= 5; i++)
				{
					var fill = i <= Model.Feedback.Valoracion ? "gold" : "transparent";
					var stroke = i <= Model.Feedback.Valoracion ? "gold" : "currentColor";
					<svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24">
						<!-- 'star' by tablericons.com | MIT Licence -->
						<path d="M12 17.75l-6.172 3.245l1.179 -6.873l-5 -4.867l6.9 -1l3.086 -6.253l3.086 6.253l6.9 1l-5 4.867l1.179 6.873z" fill="@fill" stroke="@stroke"/>
					</svg>
				}
			</p>

			<blockquote>
				@Model.Feedback.Comentario
			</blockquote>
		}

		<button class="button button-primary" type="submit">
			@(Model.Editable ? " 💾 " + AppStrings.Action_Save : AppStrings.Action_Exit)
		</button>

	</form>
</main>

<script>
		const el0 = document.querySelector("article.ejercicio");
		const button = document.querySelector("#ejercicio-container > button");
		
		function addEjercicio() {
			// Clone the first element
			const el = el0.cloneNode(true);
			
			// Clear the values of the two inputs
			el.querySelector("select").selectedIndex = 0;
			el.querySelectorAll("input[type=number]").forEach(node => node.value = "");
			
			// Change the name of the inputs
			el.querySelectorAll("input, select").forEach(node => {
				const name = node.getAttribute("name");
				node.setAttribute("name", name.replace("0", document.querySelectorAll("article.ejercicio").length));
			});
			
			// Append the element before the button
			el0.parentNode.insertBefore(el, button);
			
		}
	</script>